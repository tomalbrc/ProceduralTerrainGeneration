/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace cAudio {

using System;
using System.Runtime.InteropServices;

class cAudioCSharpWrapperPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("cAudioCSharpWrapper", EntryPoint="SWIGRegisterExceptionCallbacks_cAudioCSharpWrapper")]
    public static extern void SWIGRegisterExceptionCallbacks_cAudioCSharpWrapper(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("cAudioCSharpWrapper", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_cAudioCSharpWrapper")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_cAudioCSharpWrapper(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_cAudioCSharpWrapper(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_cAudioCSharpWrapper(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(cAudioCSharpWrapperPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(cAudioCSharpWrapperPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("cAudioCSharpWrapper", EntryPoint="SWIGRegisterStringCallback_cAudioCSharpWrapper")]
    public static extern void SWIGRegisterStringCallback_cAudioCSharpWrapper(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_cAudioCSharpWrapper(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static cAudioCSharpWrapperPINVOKE() {
  }


  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_toWINSTR")]
  public static extern string toWINSTR(string jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_toUTF8")]
  public static extern string toUTF8(string jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_fromUTF8")]
  public static extern string fromUTF8(string jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IMemoryProvider_Allocate")]
  public static extern IntPtr IMemoryProvider_Allocate(HandleRef jarg1, uint jarg2, string jarg3, int jarg4, string jarg5);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IMemoryProvider_Free")]
  public static extern void IMemoryProvider_Free(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IMemoryProvider_getMaxAllocationSize")]
  public static extern uint IMemoryProvider_getMaxAllocationSize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IMemoryProvider")]
  public static extern void delete_IMemoryProvider(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_CAUDIO_VERSION_get")]
  public static extern string CAUDIO_VERSION_get();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_CAUDIO_SOURCE_BUFFER_SIZE_get")]
  public static extern int CAUDIO_SOURCE_BUFFER_SIZE_get();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_CAUDIO_SOURCE_NUM_BUFFERS_get")]
  public static extern int CAUDIO_SOURCE_NUM_BUFFERS_get();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_CAUDIO_SOURCE_MAX_EFFECT_SLOTS_get")]
  public static extern int CAUDIO_SOURCE_MAX_EFFECT_SLOTS_get();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_getMemoryProvider")]
  public static extern IntPtr getMemoryProvider();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cAudioSleep")]
  public static extern void cAudioSleep(uint jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceList_getDeviceCount")]
  public static extern uint IAudioDeviceList_getDeviceCount(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceList_getDeviceName")]
  public static extern string IAudioDeviceList_getDeviceName(HandleRef jarg1, uint jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceList_getDeviceDescription")]
  public static extern string IAudioDeviceList_getDeviceDescription(HandleRef jarg1, uint jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceList_getDefaultDeviceName")]
  public static extern string IAudioDeviceList_getDefaultDeviceName(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceList_isSupported")]
  public static extern bool IAudioDeviceList_isSupported(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IAudioDeviceList")]
  public static extern void delete_IAudioDeviceList(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_IRefCounted")]
  public static extern IntPtr new_IRefCounted();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IRefCounted")]
  public static extern void delete_IRefCounted(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IRefCounted_grab")]
  public static extern void IRefCounted_grab(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IRefCounted_drop")]
  public static extern bool IRefCounted_drop(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IRefCounted_getReferenceCount")]
  public static extern int IRefCounted_getReferenceCount(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_IDataSource")]
  public static extern IntPtr new_IDataSource();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IDataSource")]
  public static extern void delete_IDataSource(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IDataSource_isValid")]
  public static extern bool IDataSource_isValid(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IDataSource_getCurrentPos")]
  public static extern int IDataSource_getCurrentPos(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IDataSource_getSize")]
  public static extern int IDataSource_getSize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IDataSource_read")]
  public static extern int IDataSource_read(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IDataSource_seek")]
  public static extern bool IDataSource_seek(HandleRef jarg1, int jarg2, bool jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IDataSource_director_connect")]
  public static extern void IDataSource_director_connect(HandleRef jarg1, IDataSource.SwigDelegateIDataSource_0 delegate0, IDataSource.SwigDelegateIDataSource_1 delegate1, IDataSource.SwigDelegateIDataSource_2 delegate2, IDataSource.SwigDelegateIDataSource_3 delegate3, IDataSource.SwigDelegateIDataSource_4 delegate4, IDataSource.SwigDelegateIDataSource_5 delegate5, IDataSource.SwigDelegateIDataSource_6 delegate6);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_IDataSourceFactory")]
  public static extern IntPtr new_IDataSourceFactory();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IDataSourceFactory")]
  public static extern void delete_IDataSourceFactory(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IDataSourceFactory_CreateDataSource")]
  public static extern IntPtr IDataSourceFactory_CreateDataSource(HandleRef jarg1, string jarg2, bool jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IDataSourceFactory_director_connect")]
  public static extern void IDataSourceFactory_director_connect(HandleRef jarg1, IDataSourceFactory.SwigDelegateIDataSourceFactory_0 delegate0);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_Epsilon_get")]
  public static extern float Epsilon_get();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_float_equals")]
  public static extern bool float_equals(float jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_x_set")]
  public static extern void cVector3_x_set(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_x_get")]
  public static extern float cVector3_x_get(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_y_set")]
  public static extern void cVector3_y_set(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_y_get")]
  public static extern float cVector3_y_get(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_z_set")]
  public static extern void cVector3_z_set(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_z_get")]
  public static extern float cVector3_z_get(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_cVector3__SWIG_0")]
  public static extern IntPtr new_cVector3__SWIG_0();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_cVector3__SWIG_1")]
  public static extern IntPtr new_cVector3__SWIG_1(float jarg1, float jarg2, float jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_cVector3__SWIG_2")]
  public static extern IntPtr new_cVector3__SWIG_2(float jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_cVector3__SWIG_3")]
  public static extern IntPtr new_cVector3__SWIG_3(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_cVector3__SWIG_4")]
  public static extern IntPtr new_cVector3__SWIG_4(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Minus__SWIG_0")]
  public static extern IntPtr cVector3_Minus__SWIG_0(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Equal")]
  public static extern IntPtr cVector3_Equal(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Plus__SWIG_0")]
  public static extern IntPtr cVector3_Plus__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_PlusEqual__SWIG_0")]
  public static extern IntPtr cVector3_PlusEqual__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Plus__SWIG_1")]
  public static extern IntPtr cVector3_Plus__SWIG_1(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_PlusEqual__SWIG_1")]
  public static extern IntPtr cVector3_PlusEqual__SWIG_1(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Minus__SWIG_1")]
  public static extern IntPtr cVector3_Minus__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_MinusEqual__SWIG_0")]
  public static extern IntPtr cVector3_MinusEqual__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Minus__SWIG_2")]
  public static extern IntPtr cVector3_Minus__SWIG_2(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_MinusEqual__SWIG_1")]
  public static extern IntPtr cVector3_MinusEqual__SWIG_1(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Multiply__SWIG_0")]
  public static extern IntPtr cVector3_Multiply__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_MultiplyEqual__SWIG_0")]
  public static extern IntPtr cVector3_MultiplyEqual__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Multiply__SWIG_1")]
  public static extern IntPtr cVector3_Multiply__SWIG_1(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_MultiplyEqual__SWIG_1")]
  public static extern IntPtr cVector3_MultiplyEqual__SWIG_1(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Divide__SWIG_0")]
  public static extern IntPtr cVector3_Divide__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_DivideEqual__SWIG_0")]
  public static extern IntPtr cVector3_DivideEqual__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_Divide__SWIG_1")]
  public static extern IntPtr cVector3_Divide__SWIG_1(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_DivideEqual__SWIG_1")]
  public static extern IntPtr cVector3_DivideEqual__SWIG_1(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_LessThanEqual")]
  public static extern bool cVector3_LessThanEqual(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_GreaterThanEqual")]
  public static extern bool cVector3_GreaterThanEqual(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_LessThan")]
  public static extern bool cVector3_LessThan(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_GreaterThan")]
  public static extern bool cVector3_GreaterThan(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_EqualEqual")]
  public static extern bool cVector3_EqualEqual(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_NotEqual")]
  public static extern bool cVector3_NotEqual(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_length")]
  public static extern float cVector3_length(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_normalize")]
  public static extern void cVector3_normalize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_dot")]
  public static extern float cVector3_dot(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_cross")]
  public static extern IntPtr cVector3_cross(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_set__SWIG_0")]
  public static extern void cVector3_set__SWIG_0(HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_set__SWIG_1")]
  public static extern void cVector3_set__SWIG_1(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_set__SWIG_2")]
  public static extern void cVector3_set__SWIG_2(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_cVector3_getAsArray")]
  public static extern void cVector3_getAsArray(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_cVector3")]
  public static extern void delete_cVector3(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IListener")]
  public static extern void delete_IListener(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_setPosition")]
  public static extern void IListener_setPosition(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_setDirection")]
  public static extern void IListener_setDirection(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_setUpVector")]
  public static extern void IListener_setUpVector(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_setVelocity")]
  public static extern void IListener_setVelocity(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_setMasterVolume")]
  public static extern void IListener_setMasterVolume(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_move")]
  public static extern void IListener_move(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_getPosition")]
  public static extern IntPtr IListener_getPosition(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_getDirection")]
  public static extern IntPtr IListener_getDirection(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_getUpVector")]
  public static extern IntPtr IListener_getUpVector(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_getVelocity")]
  public static extern IntPtr IListener_getVelocity(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IListener_getMasterVolume")]
  public static extern float IListener_getMasterVolume(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_LogLevelStrings_get")]
  public static extern IntPtr LogLevelStrings_get();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_ILogReceiver")]
  public static extern IntPtr new_ILogReceiver();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_ILogReceiver")]
  public static extern void delete_ILogReceiver(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogReceiver_OnLogMessage")]
  public static extern bool ILogReceiver_OnLogMessage(HandleRef jarg1, string jarg2, string jarg3, int jarg4, float jarg5);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogReceiver_director_connect")]
  public static extern void ILogReceiver_director_connect(HandleRef jarg1, ILogReceiver.SwigDelegateILogReceiver_0 delegate0);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_ILogger")]
  public static extern void delete_ILogger(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_logCritical")]
  public static extern void ILogger_logCritical(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_logError")]
  public static extern void ILogger_logError(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_logWarning")]
  public static extern void ILogger_logWarning(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_logInfo")]
  public static extern void ILogger_logInfo(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_logDebug")]
  public static extern void ILogger_logDebug(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_getLogLevel")]
  public static extern int ILogger_getLogLevel(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_setLogLevel")]
  public static extern void ILogger_setLogLevel(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_registerLogReceiver")]
  public static extern bool ILogger_registerLogReceiver(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_unRegisterLogReceiver")]
  public static extern void ILogger_unRegisterLogReceiver(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_isLogReceiverRegistered")]
  public static extern bool ILogger_isLogReceiverRegistered(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ILogger_getLogReceiver")]
  public static extern IntPtr ILogger_getLogReceiver(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IManagerEventHandler_onInit")]
  public static extern void IManagerEventHandler_onInit(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IManagerEventHandler_onUpdate")]
  public static extern void IManagerEventHandler_onUpdate(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IManagerEventHandler_onRelease")]
  public static extern void IManagerEventHandler_onRelease(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IManagerEventHandler_onSourceCreate")]
  public static extern void IManagerEventHandler_onSourceCreate(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IManagerEventHandler_onDecoderRegister")]
  public static extern void IManagerEventHandler_onDecoderRegister(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IManagerEventHandler_onDataSourceRegister")]
  public static extern void IManagerEventHandler_onDataSourceRegister(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_IManagerEventHandler")]
  public static extern IntPtr new_IManagerEventHandler();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IManagerEventHandler")]
  public static extern void delete_IManagerEventHandler(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IManagerEventHandler_director_connect")]
  public static extern void IManagerEventHandler_director_connect(HandleRef jarg1, IManagerEventHandler.SwigDelegateIManagerEventHandler_0 delegate0, IManagerEventHandler.SwigDelegateIManagerEventHandler_1 delegate1, IManagerEventHandler.SwigDelegateIManagerEventHandler_2 delegate2, IManagerEventHandler.SwigDelegateIManagerEventHandler_3 delegate3, IManagerEventHandler.SwigDelegateIManagerEventHandler_4 delegate4, IManagerEventHandler.SwigDelegateIManagerEventHandler_5 delegate5);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ISourceEventHandler_onUpdate")]
  public static extern void ISourceEventHandler_onUpdate(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ISourceEventHandler_onRelease")]
  public static extern void ISourceEventHandler_onRelease(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ISourceEventHandler_onPlay")]
  public static extern void ISourceEventHandler_onPlay(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ISourceEventHandler_onStop")]
  public static extern void ISourceEventHandler_onStop(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ISourceEventHandler_onPause")]
  public static extern void ISourceEventHandler_onPause(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_ISourceEventHandler")]
  public static extern IntPtr new_ISourceEventHandler();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_ISourceEventHandler")]
  public static extern void delete_ISourceEventHandler(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ISourceEventHandler_director_connect")]
  public static extern void ISourceEventHandler_director_connect(HandleRef jarg1, ISourceEventHandler.SwigDelegateISourceEventHandler_0 delegate0, ISourceEventHandler.SwigDelegateISourceEventHandler_1 delegate1, ISourceEventHandler.SwigDelegateISourceEventHandler_2 delegate2, ISourceEventHandler.SwigDelegateISourceEventHandler_3 delegate3, ISourceEventHandler.SwigDelegateISourceEventHandler_4 delegate4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ICaptureEventHandler_onInit")]
  public static extern void ICaptureEventHandler_onInit(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ICaptureEventHandler_onUpdate")]
  public static extern void ICaptureEventHandler_onUpdate(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ICaptureEventHandler_onRelease")]
  public static extern void ICaptureEventHandler_onRelease(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ICaptureEventHandler_onBeginCapture")]
  public static extern void ICaptureEventHandler_onBeginCapture(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ICaptureEventHandler_onEndCapture")]
  public static extern void ICaptureEventHandler_onEndCapture(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ICaptureEventHandler_onUserRequestBuffer")]
  public static extern void ICaptureEventHandler_onUserRequestBuffer(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_ICaptureEventHandler")]
  public static extern IntPtr new_ICaptureEventHandler();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_ICaptureEventHandler")]
  public static extern void delete_ICaptureEventHandler(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_ICaptureEventHandler_director_connect")]
  public static extern void ICaptureEventHandler_director_connect(HandleRef jarg1, ICaptureEventHandler.SwigDelegateICaptureEventHandler_0 delegate0, ICaptureEventHandler.SwigDelegateICaptureEventHandler_1 delegate1, ICaptureEventHandler.SwigDelegateICaptureEventHandler_2 delegate2, ICaptureEventHandler.SwigDelegateICaptureEventHandler_3 delegate3, ICaptureEventHandler.SwigDelegateICaptureEventHandler_4 delegate4, ICaptureEventHandler.SwigDelegateICaptureEventHandler_5 delegate5);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IAudioCapture")]
  public static extern void delete_IAudioCapture(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_initialize__SWIG_0")]
  public static extern bool IAudioCapture_initialize__SWIG_0(HandleRef jarg1, string jarg2, uint jarg3, int jarg4, uint jarg5);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_initialize__SWIG_1")]
  public static extern bool IAudioCapture_initialize__SWIG_1(HandleRef jarg1, string jarg2, uint jarg3, int jarg4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_initialize__SWIG_2")]
  public static extern bool IAudioCapture_initialize__SWIG_2(HandleRef jarg1, string jarg2, uint jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_initialize__SWIG_3")]
  public static extern bool IAudioCapture_initialize__SWIG_3(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_initialize__SWIG_4")]
  public static extern bool IAudioCapture_initialize__SWIG_4(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_isReady")]
  public static extern bool IAudioCapture_isReady(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_updateCaptureBuffer__SWIG_0")]
  public static extern void IAudioCapture_updateCaptureBuffer__SWIG_0(HandleRef jarg1, bool jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_updateCaptureBuffer__SWIG_1")]
  public static extern void IAudioCapture_updateCaptureBuffer__SWIG_1(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_shutdown")]
  public static extern void IAudioCapture_shutdown(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_isUpdateThreadRunning")]
  public static extern bool IAudioCapture_isUpdateThreadRunning(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_getDeviceName")]
  public static extern string IAudioCapture_getDeviceName(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_getFrequency")]
  public static extern uint IAudioCapture_getFrequency(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_getFormat")]
  public static extern int IAudioCapture_getFormat(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_getInternalBufferSize")]
  public static extern uint IAudioCapture_getInternalBufferSize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_getSampleSize")]
  public static extern uint IAudioCapture_getSampleSize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_setDevice")]
  public static extern bool IAudioCapture_setDevice(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_setFrequency")]
  public static extern bool IAudioCapture_setFrequency(HandleRef jarg1, uint jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_setFormat")]
  public static extern bool IAudioCapture_setFormat(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_setInternalBufferSize")]
  public static extern bool IAudioCapture_setInternalBufferSize(HandleRef jarg1, uint jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_beginCapture")]
  public static extern bool IAudioCapture_beginCapture(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_stopCapture")]
  public static extern void IAudioCapture_stopCapture(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_getCapturedAudio")]
  public static extern uint IAudioCapture_getCapturedAudio(HandleRef jarg1, HandleRef jarg2, uint jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_getCapturedAudioBuffer")]
  public static extern IntPtr IAudioCapture_getCapturedAudioBuffer(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_getCurrentCapturedAudioSize")]
  public static extern uint IAudioCapture_getCurrentCapturedAudioSize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_registerEventHandler")]
  public static extern void IAudioCapture_registerEventHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_unRegisterEventHandler")]
  public static extern void IAudioCapture_unRegisterEventHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioCapture_unRegisterAllEventHandlers")]
  public static extern void IAudioCapture_unRegisterAllEventHandlers(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_AudioCaptureBuffer__SWIG_0")]
  public static extern IntPtr new_AudioCaptureBuffer__SWIG_0(uint jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_AudioCaptureBuffer__SWIG_1")]
  public static extern IntPtr new_AudioCaptureBuffer__SWIG_1(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_AudioCaptureBuffer")]
  public static extern void delete_AudioCaptureBuffer(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_AudioCaptureBuffer_getReadBuffer")]
  public static extern string AudioCaptureBuffer_getReadBuffer(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_AudioCaptureBuffer_getWriteBuffer")]
  public static extern string AudioCaptureBuffer_getWriteBuffer(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_AudioCaptureBuffer_getLength")]
  public static extern uint AudioCaptureBuffer_getLength(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_IAudioDecoder")]
  public static extern IntPtr new_IAudioDecoder(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IAudioDecoder")]
  public static extern void delete_IAudioDecoder(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_getFormat")]
  public static extern int IAudioDecoder_getFormat(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_getFrequency")]
  public static extern int IAudioDecoder_getFrequency(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_isSeekingSupported")]
  public static extern bool IAudioDecoder_isSeekingSupported(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_isValid")]
  public static extern bool IAudioDecoder_isValid(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_readAudioData")]
  public static extern int IAudioDecoder_readAudioData(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_setPosition")]
  public static extern bool IAudioDecoder_setPosition(HandleRef jarg1, int jarg2, bool jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_seek")]
  public static extern bool IAudioDecoder_seek(HandleRef jarg1, float jarg2, bool jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_getTotalTime")]
  public static extern float IAudioDecoder_getTotalTime(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_getTotalSize")]
  public static extern int IAudioDecoder_getTotalSize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_getCompressedSize")]
  public static extern int IAudioDecoder_getCompressedSize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_getCurrentTime")]
  public static extern float IAudioDecoder_getCurrentTime(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_getCurrentPosition")]
  public static extern int IAudioDecoder_getCurrentPosition(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_getCurrentCompressedPosition")]
  public static extern int IAudioDecoder_getCurrentCompressedPosition(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_getType")]
  public static extern string IAudioDecoder_getType(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_director_connect")]
  public static extern void IAudioDecoder_director_connect(HandleRef jarg1, IAudioDecoder.SwigDelegateIAudioDecoder_0 delegate0, IAudioDecoder.SwigDelegateIAudioDecoder_1 delegate1, IAudioDecoder.SwigDelegateIAudioDecoder_2 delegate2, IAudioDecoder.SwigDelegateIAudioDecoder_3 delegate3, IAudioDecoder.SwigDelegateIAudioDecoder_4 delegate4, IAudioDecoder.SwigDelegateIAudioDecoder_5 delegate5, IAudioDecoder.SwigDelegateIAudioDecoder_6 delegate6, IAudioDecoder.SwigDelegateIAudioDecoder_7 delegate7, IAudioDecoder.SwigDelegateIAudioDecoder_8 delegate8, IAudioDecoder.SwigDelegateIAudioDecoder_9 delegate9, IAudioDecoder.SwigDelegateIAudioDecoder_10 delegate10, IAudioDecoder.SwigDelegateIAudioDecoder_11 delegate11, IAudioDecoder.SwigDelegateIAudioDecoder_12 delegate12, IAudioDecoder.SwigDelegateIAudioDecoder_13 delegate13, IAudioDecoder.SwigDelegateIAudioDecoder_14 delegate14, IAudioDecoder.SwigDelegateIAudioDecoder_15 delegate15);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_IAudioDecoderFactory")]
  public static extern IntPtr new_IAudioDecoderFactory();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IAudioDecoderFactory")]
  public static extern void delete_IAudioDecoderFactory(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoderFactory_CreateAudioDecoder")]
  public static extern IntPtr IAudioDecoderFactory_CreateAudioDecoder(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoderFactory_director_connect")]
  public static extern void IAudioDecoderFactory_director_connect(HandleRef jarg1, IAudioDecoderFactory.SwigDelegateIAudioDecoderFactory_0 delegate0);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IAudioManager")]
  public static extern void delete_IAudioManager(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_initialize__SWIG_0")]
  public static extern bool IAudioManager_initialize__SWIG_0(HandleRef jarg1, string jarg2, int jarg3, int jarg4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_initialize__SWIG_1")]
  public static extern bool IAudioManager_initialize__SWIG_1(HandleRef jarg1, string jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_initialize__SWIG_2")]
  public static extern bool IAudioManager_initialize__SWIG_2(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_initialize__SWIG_3")]
  public static extern bool IAudioManager_initialize__SWIG_3(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_shutDown")]
  public static extern void IAudioManager_shutDown(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_update")]
  public static extern void IAudioManager_update(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_isUpdateThreadRunning")]
  public static extern bool IAudioManager_isUpdateThreadRunning(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_getSoundByName")]
  public static extern IntPtr IAudioManager_getSoundByName(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_releaseAllSources")]
  public static extern void IAudioManager_releaseAllSources(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_release")]
  public static extern void IAudioManager_release(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_play2D__SWIG_0")]
  public static extern IntPtr IAudioManager_play2D__SWIG_0(HandleRef jarg1, string jarg2, bool jarg3, bool jarg4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_play2D__SWIG_1")]
  public static extern IntPtr IAudioManager_play2D__SWIG_1(HandleRef jarg1, string jarg2, bool jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_play2D__SWIG_2")]
  public static extern IntPtr IAudioManager_play2D__SWIG_2(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_play3D__SWIG_0")]
  public static extern IntPtr IAudioManager_play3D__SWIG_0(HandleRef jarg1, string jarg2, HandleRef jarg3, bool jarg4, bool jarg5);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_play3D__SWIG_1")]
  public static extern IntPtr IAudioManager_play3D__SWIG_1(HandleRef jarg1, string jarg2, HandleRef jarg3, bool jarg4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_play3D__SWIG_2")]
  public static extern IntPtr IAudioManager_play3D__SWIG_2(HandleRef jarg1, string jarg2, HandleRef jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_setMasterVolume")]
  public static extern void IAudioManager_setMasterVolume(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_getMasterVolume")]
  public static extern float IAudioManager_getMasterVolume(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_stopAllSounds")]
  public static extern void IAudioManager_stopAllSounds(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_create__SWIG_0")]
  public static extern IntPtr IAudioManager_create__SWIG_0(HandleRef jarg1, string jarg2, string jarg3, bool jarg4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_create__SWIG_1")]
  public static extern IntPtr IAudioManager_create__SWIG_1(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_createFromMemory")]
  public static extern IntPtr IAudioManager_createFromMemory(HandleRef jarg1, string jarg2, string jarg3, uint jarg4, string jarg5);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_createFromRaw")]
  public static extern IntPtr IAudioManager_createFromRaw(HandleRef jarg1, string jarg2, string jarg3, uint jarg4, uint jarg5, int jarg6);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_createFromAudioBuffer")]
  public static extern IntPtr IAudioManager_createFromAudioBuffer(HandleRef jarg1, string jarg2, HandleRef jarg3, uint jarg4, int jarg5);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_registerAudioDecoder")]
  public static extern bool IAudioManager_registerAudioDecoder(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_unRegisterAudioDecoder")]
  public static extern void IAudioManager_unRegisterAudioDecoder(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_isAudioDecoderRegistered")]
  public static extern bool IAudioManager_isAudioDecoderRegistered(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_getAudioDecoderFactory")]
  public static extern IntPtr IAudioManager_getAudioDecoderFactory(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_unRegisterAllAudioDecoders")]
  public static extern void IAudioManager_unRegisterAllAudioDecoders(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_registerDataSource")]
  public static extern bool IAudioManager_registerDataSource(HandleRef jarg1, HandleRef jarg2, string jarg3, int jarg4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_unRegisterDataSource")]
  public static extern void IAudioManager_unRegisterDataSource(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_isDataSourceRegistered")]
  public static extern bool IAudioManager_isDataSourceRegistered(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_getDataSourceFactory")]
  public static extern IntPtr IAudioManager_getDataSourceFactory(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_unRegisterAllDataSources")]
  public static extern void IAudioManager_unRegisterAllDataSources(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_registerEventHandler")]
  public static extern void IAudioManager_registerEventHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_unRegisterEventHandler")]
  public static extern void IAudioManager_unRegisterEventHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_unRegisterAllEventHandlers")]
  public static extern void IAudioManager_unRegisterAllEventHandlers(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioManager_getListener")]
  public static extern IntPtr IAudioManager_getListener(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceContext_initialize")]
  public static extern bool IAudioDeviceContext_initialize(HandleRef jarg1, string jarg2, int jarg3, int jarg4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceContext_shutDown")]
  public static extern void IAudioDeviceContext_shutDown(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceContext_update")]
  public static extern void IAudioDeviceContext_update(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceContext_getAudioManager")]
  public static extern IntPtr IAudioDeviceContext_getAudioManager(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDeviceContext_getEffects")]
  public static extern IntPtr IAudioDeviceContext_getEffects(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IAudioDeviceContext")]
  public static extern void delete_IAudioDeviceContext(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IAudioPlugin")]
  public static extern void delete_IAudioPlugin(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioPlugin_installPlugin")]
  public static extern bool IAudioPlugin_installPlugin(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioPlugin_getPluginName")]
  public static extern string IAudioPlugin_getPluginName(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioPlugin_uninstallPlugin")]
  public static extern void IAudioPlugin_uninstallPlugin(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioPlugin_onCreateAudioManager")]
  public static extern void IAudioPlugin_onCreateAudioManager(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioPlugin_onCreateAudioCapture")]
  public static extern void IAudioPlugin_onCreateAudioCapture(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioPlugin_onDestroyAudioManager")]
  public static extern void IAudioPlugin_onDestroyAudioManager(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioPlugin_onDestoryAudioCapture")]
  public static extern void IAudioPlugin_onDestoryAudioCapture(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IAudioSource")]
  public static extern void delete_IAudioSource(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_play")]
  public static extern bool IAudioSource_play(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_play2d__SWIG_0")]
  public static extern bool IAudioSource_play2d__SWIG_0(HandleRef jarg1, bool jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_play2d__SWIG_1")]
  public static extern bool IAudioSource_play2d__SWIG_1(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_play3d__SWIG_0")]
  public static extern bool IAudioSource_play3d__SWIG_0(HandleRef jarg1, HandleRef jarg2, float jarg3, bool jarg4);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_play3d__SWIG_1")]
  public static extern bool IAudioSource_play3d__SWIG_1(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_play3d__SWIG_2")]
  public static extern bool IAudioSource_play3d__SWIG_2(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_pause")]
  public static extern void IAudioSource_pause(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_stop")]
  public static extern void IAudioSource_stop(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_loop")]
  public static extern void IAudioSource_loop(HandleRef jarg1, bool jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_seek__SWIG_0")]
  public static extern bool IAudioSource_seek__SWIG_0(HandleRef jarg1, float jarg2, bool jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_seek__SWIG_1")]
  public static extern bool IAudioSource_seek__SWIG_1(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getTotalAudioTime")]
  public static extern float IAudioSource_getTotalAudioTime(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getTotalAudioSize")]
  public static extern int IAudioSource_getTotalAudioSize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getCompressedAudioSize")]
  public static extern int IAudioSource_getCompressedAudioSize(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getCurrentAudioTime")]
  public static extern float IAudioSource_getCurrentAudioTime(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getCurrentAudioPosition")]
  public static extern int IAudioSource_getCurrentAudioPosition(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getCurrentCompressedAudioPosition")]
  public static extern int IAudioSource_getCurrentCompressedAudioPosition(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_update")]
  public static extern bool IAudioSource_update(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_isValid")]
  public static extern bool IAudioSource_isValid(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_isPlaying")]
  public static extern bool IAudioSource_isPlaying(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_isPaused")]
  public static extern bool IAudioSource_isPaused(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_isStopped")]
  public static extern bool IAudioSource_isStopped(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_isLooping")]
  public static extern bool IAudioSource_isLooping(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setPosition")]
  public static extern void IAudioSource_setPosition(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setVelocity")]
  public static extern void IAudioSource_setVelocity(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setDirection")]
  public static extern void IAudioSource_setDirection(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setRolloffFactor")]
  public static extern void IAudioSource_setRolloffFactor(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setStrength")]
  public static extern void IAudioSource_setStrength(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setMinDistance")]
  public static extern void IAudioSource_setMinDistance(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setMaxAttenuationDistance")]
  public static extern void IAudioSource_setMaxAttenuationDistance(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setPitch")]
  public static extern void IAudioSource_setPitch(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setVolume")]
  public static extern void IAudioSource_setVolume(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setMinVolume")]
  public static extern void IAudioSource_setMinVolume(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setMaxVolume")]
  public static extern void IAudioSource_setMaxVolume(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setInnerConeAngle")]
  public static extern void IAudioSource_setInnerConeAngle(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setOuterConeAngle")]
  public static extern void IAudioSource_setOuterConeAngle(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setOuterConeVolume")]
  public static extern void IAudioSource_setOuterConeVolume(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setDopplerStrength")]
  public static extern void IAudioSource_setDopplerStrength(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_setDopplerVelocity")]
  public static extern void IAudioSource_setDopplerVelocity(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_move")]
  public static extern void IAudioSource_move(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getPosition")]
  public static extern IntPtr IAudioSource_getPosition(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getVelocity")]
  public static extern IntPtr IAudioSource_getVelocity(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getDirection")]
  public static extern IntPtr IAudioSource_getDirection(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getRolloffFactor")]
  public static extern float IAudioSource_getRolloffFactor(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getStrength")]
  public static extern float IAudioSource_getStrength(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getMinDistance")]
  public static extern float IAudioSource_getMinDistance(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getMaxDistance")]
  public static extern float IAudioSource_getMaxDistance(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getPitch")]
  public static extern float IAudioSource_getPitch(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getVolume")]
  public static extern float IAudioSource_getVolume(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getMinVolume")]
  public static extern float IAudioSource_getMinVolume(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getMaxVolume")]
  public static extern float IAudioSource_getMaxVolume(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getInnerConeAngle")]
  public static extern float IAudioSource_getInnerConeAngle(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getOuterConeAngle")]
  public static extern float IAudioSource_getOuterConeAngle(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getOuterConeVolume")]
  public static extern float IAudioSource_getOuterConeVolume(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getDopplerStrength")]
  public static extern float IAudioSource_getDopplerStrength(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_getDopplerVelocity")]
  public static extern IntPtr IAudioSource_getDopplerVelocity(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_registerEventHandler")]
  public static extern void IAudioSource_registerEventHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_unRegisterEventHandler")]
  public static extern void IAudioSource_unRegisterEventHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_unRegisterAllEventHandlers")]
  public static extern void IAudioSource_unRegisterAllEventHandlers(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IPluginManager")]
  public static extern void delete_IPluginManager(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IPluginManager_installPlugin__SWIG_0")]
  public static extern bool IPluginManager_installPlugin__SWIG_0(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IPluginManager_installPlugin__SWIG_1")]
  public static extern bool IPluginManager_installPlugin__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IPluginManager_installPlugin__SWIG_2")]
  public static extern bool IPluginManager_installPlugin__SWIG_2(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IPluginManager_installPlugin__SWIG_3")]
  public static extern bool IPluginManager_installPlugin__SWIG_3(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IPluginManager_checkForPlugin")]
  public static extern bool IPluginManager_checkForPlugin(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IPluginManager_getPlugin")]
  public static extern IntPtr IPluginManager_getPlugin(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IPluginManager_getPluginCount")]
  public static extern uint IPluginManager_getPluginCount(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IPluginManager_uninstallPlugin__SWIG_0")]
  public static extern void IPluginManager_uninstallPlugin__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IPluginManager_uninstallPlugin__SWIG_1")]
  public static extern void IPluginManager_uninstallPlugin__SWIG_1(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_getPluginManager")]
  public static extern IntPtr getPluginManager();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IThread_start")]
  public static extern bool IThread_start(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IThread_join")]
  public static extern void IThread_join(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IThread_shutdown")]
  public static extern void IThread_shutdown(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IThread_isRunning")]
  public static extern bool IThread_isRunning(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IThread")]
  public static extern void delete_IThread(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IThreadWorker_run")]
  public static extern void IThreadWorker_run(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IThreadWorker")]
  public static extern void delete_IThreadWorker(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_createAudioManager__SWIG_0")]
  public static extern IntPtr createAudioManager__SWIG_0(bool jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_createAudioManager__SWIG_1")]
  public static extern IntPtr createAudioManager__SWIG_1();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_destroyAudioManager")]
  public static extern void destroyAudioManager(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_createAudioCapture__SWIG_0")]
  public static extern IntPtr createAudioCapture__SWIG_0(bool jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_createAudioCapture__SWIG_1")]
  public static extern IntPtr createAudioCapture__SWIG_1();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_destroyAudioCapture")]
  public static extern void destroyAudioCapture(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_getLogger")]
  public static extern IntPtr getLogger();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_createAudioDeviceList__SWIG_0")]
  public static extern IntPtr createAudioDeviceList__SWIG_0(int jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_createAudioDeviceList__SWIG_1")]
  public static extern IntPtr createAudioDeviceList__SWIG_1();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_Clear")]
  public static extern void IntVector_Clear(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_Add")]
  public static extern void IntVector_Add(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_size")]
  public static extern uint IntVector_size(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_capacity")]
  public static extern uint IntVector_capacity(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_reserve")]
  public static extern void IntVector_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_IntVector__SWIG_0")]
  public static extern IntPtr new_IntVector__SWIG_0();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_IntVector__SWIG_1")]
  public static extern IntPtr new_IntVector__SWIG_1(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_IntVector__SWIG_2")]
  public static extern IntPtr new_IntVector__SWIG_2(int jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_getitemcopy")]
  public static extern int IntVector_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_getitem")]
  public static extern int IntVector_getitem(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_setitem")]
  public static extern void IntVector_setitem(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_AddRange")]
  public static extern void IntVector_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_GetRange")]
  public static extern IntPtr IntVector_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_Insert")]
  public static extern void IntVector_Insert(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_InsertRange")]
  public static extern void IntVector_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_RemoveAt")]
  public static extern void IntVector_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_RemoveRange")]
  public static extern void IntVector_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_Repeat")]
  public static extern IntPtr IntVector_Repeat(int jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_Reverse__SWIG_0")]
  public static extern void IntVector_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_Reverse__SWIG_1")]
  public static extern void IntVector_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_SetRange")]
  public static extern void IntVector_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_Contains")]
  public static extern bool IntVector_Contains(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_IndexOf")]
  public static extern int IntVector_IndexOf(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_LastIndexOf")]
  public static extern int IntVector_LastIndexOf(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IntVector_Remove")]
  public static extern bool IntVector_Remove(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_IntVector")]
  public static extern void delete_IntVector(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_Clear")]
  public static extern void DoubleVector_Clear(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_Add")]
  public static extern void DoubleVector_Add(HandleRef jarg1, double jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_size")]
  public static extern uint DoubleVector_size(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_capacity")]
  public static extern uint DoubleVector_capacity(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_reserve")]
  public static extern void DoubleVector_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_DoubleVector__SWIG_0")]
  public static extern IntPtr new_DoubleVector__SWIG_0();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_DoubleVector__SWIG_1")]
  public static extern IntPtr new_DoubleVector__SWIG_1(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_DoubleVector__SWIG_2")]
  public static extern IntPtr new_DoubleVector__SWIG_2(int jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_getitemcopy")]
  public static extern double DoubleVector_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_getitem")]
  public static extern double DoubleVector_getitem(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_setitem")]
  public static extern void DoubleVector_setitem(HandleRef jarg1, int jarg2, double jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_AddRange")]
  public static extern void DoubleVector_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_GetRange")]
  public static extern IntPtr DoubleVector_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_Insert")]
  public static extern void DoubleVector_Insert(HandleRef jarg1, int jarg2, double jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_InsertRange")]
  public static extern void DoubleVector_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_RemoveAt")]
  public static extern void DoubleVector_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_RemoveRange")]
  public static extern void DoubleVector_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_Repeat")]
  public static extern IntPtr DoubleVector_Repeat(double jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_Reverse__SWIG_0")]
  public static extern void DoubleVector_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_Reverse__SWIG_1")]
  public static extern void DoubleVector_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_SetRange")]
  public static extern void DoubleVector_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_Contains")]
  public static extern bool DoubleVector_Contains(HandleRef jarg1, double jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_IndexOf")]
  public static extern int DoubleVector_IndexOf(HandleRef jarg1, double jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_LastIndexOf")]
  public static extern int DoubleVector_LastIndexOf(HandleRef jarg1, double jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_DoubleVector_Remove")]
  public static extern bool DoubleVector_Remove(HandleRef jarg1, double jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_DoubleVector")]
  public static extern void delete_DoubleVector(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_Clear")]
  public static extern void StringVector_Clear(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_Add")]
  public static extern void StringVector_Add(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_size")]
  public static extern uint StringVector_size(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_capacity")]
  public static extern uint StringVector_capacity(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_reserve")]
  public static extern void StringVector_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_StringVector__SWIG_0")]
  public static extern IntPtr new_StringVector__SWIG_0();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_StringVector__SWIG_1")]
  public static extern IntPtr new_StringVector__SWIG_1(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_StringVector__SWIG_2")]
  public static extern IntPtr new_StringVector__SWIG_2(int jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_getitemcopy")]
  public static extern string StringVector_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_getitem")]
  public static extern string StringVector_getitem(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_setitem")]
  public static extern void StringVector_setitem(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_AddRange")]
  public static extern void StringVector_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_GetRange")]
  public static extern IntPtr StringVector_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_Insert")]
  public static extern void StringVector_Insert(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_InsertRange")]
  public static extern void StringVector_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_RemoveAt")]
  public static extern void StringVector_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_RemoveRange")]
  public static extern void StringVector_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_Repeat")]
  public static extern IntPtr StringVector_Repeat(string jarg1, int jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_Reverse__SWIG_0")]
  public static extern void StringVector_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_Reverse__SWIG_1")]
  public static extern void StringVector_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_SetRange")]
  public static extern void StringVector_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_Contains")]
  public static extern bool StringVector_Contains(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_IndexOf")]
  public static extern int StringVector_IndexOf(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_LastIndexOf")]
  public static extern int StringVector_LastIndexOf(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringVector_Remove")]
  public static extern bool StringVector_Remove(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_StringVector")]
  public static extern void delete_StringVector(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_StringMap__SWIG_0")]
  public static extern IntPtr new_StringMap__SWIG_0();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_StringMap__SWIG_1")]
  public static extern IntPtr new_StringMap__SWIG_1(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_size")]
  public static extern uint StringMap_size(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_empty")]
  public static extern bool StringMap_empty(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_Clear")]
  public static extern void StringMap_Clear(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_getitem")]
  public static extern string StringMap_getitem(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_setitem")]
  public static extern void StringMap_setitem(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_ContainsKey")]
  public static extern bool StringMap_ContainsKey(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_Add")]
  public static extern void StringMap_Add(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_Remove")]
  public static extern bool StringMap_Remove(HandleRef jarg1, string jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_create_iterator_begin")]
  public static extern IntPtr StringMap_create_iterator_begin(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_get_next_key")]
  public static extern string StringMap_get_next_key(HandleRef jarg1, IntPtr jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_StringMap_destroy_iterator")]
  public static extern void StringMap_destroy_iterator(HandleRef jarg1, IntPtr jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_StringMap")]
  public static extern void delete_StringMap(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_new_floatp")]
  public static extern IntPtr new_floatp();

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_copy_floatp")]
  public static extern IntPtr copy_floatp(float jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_delete_floatp")]
  public static extern void delete_floatp(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_floatp_assign")]
  public static extern void floatp_assign(HandleRef jarg1, float jarg2);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_floatp_value")]
  public static extern float floatp_value(HandleRef jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IDataSource_SWIGUpcast")]
  public static extern IntPtr IDataSource_SWIGUpcast(IntPtr jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioDecoder_SWIGUpcast")]
  public static extern IntPtr IAudioDecoder_SWIGUpcast(IntPtr jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioPlugin_SWIGUpcast")]
  public static extern IntPtr IAudioPlugin_SWIGUpcast(IntPtr jarg1);

  [DllImport("cAudioCSharpWrapper", EntryPoint="CSharp_IAudioSource_SWIGUpcast")]
  public static extern IntPtr IAudioSource_SWIGUpcast(IntPtr jarg1);
}

}
