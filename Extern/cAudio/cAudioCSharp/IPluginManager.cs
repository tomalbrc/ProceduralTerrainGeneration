/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace cAudio {

using System;
using System.Runtime.InteropServices;

public class IPluginManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IPluginManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IPluginManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IPluginManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cAudioCSharpWrapperPINVOKE.delete_IPluginManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual bool installPlugin(IAudioPlugin plugin, string name) {
    bool ret = cAudioCSharpWrapperPINVOKE.IPluginManager_installPlugin__SWIG_0(swigCPtr, IAudioPlugin.getCPtr(plugin), name);
    return ret;
  }

  public virtual bool installPlugin(IAudioPlugin plugin) {
    bool ret = cAudioCSharpWrapperPINVOKE.IPluginManager_installPlugin__SWIG_1(swigCPtr, IAudioPlugin.getCPtr(plugin));
    return ret;
  }

  public virtual bool installPlugin(string filename, string name) {
    bool ret = cAudioCSharpWrapperPINVOKE.IPluginManager_installPlugin__SWIG_2(swigCPtr, filename, name);
    return ret;
  }

  public virtual bool installPlugin(string filename) {
    bool ret = cAudioCSharpWrapperPINVOKE.IPluginManager_installPlugin__SWIG_3(swigCPtr, filename);
    return ret;
  }

  public virtual bool checkForPlugin(string name) {
    bool ret = cAudioCSharpWrapperPINVOKE.IPluginManager_checkForPlugin(swigCPtr, name);
    return ret;
  }

  public virtual IAudioPlugin getPlugin(string name) {
    IntPtr cPtr = cAudioCSharpWrapperPINVOKE.IPluginManager_getPlugin(swigCPtr, name);
    IAudioPlugin ret = (cPtr == IntPtr.Zero) ? null : new IAudioPlugin(cPtr, false);
    return ret;
  }

  public virtual uint getPluginCount() {
    uint ret = cAudioCSharpWrapperPINVOKE.IPluginManager_getPluginCount(swigCPtr);
    return ret;
  }

  public virtual void uninstallPlugin(IAudioPlugin plugin) {
    cAudioCSharpWrapperPINVOKE.IPluginManager_uninstallPlugin__SWIG_0(swigCPtr, IAudioPlugin.getCPtr(plugin));
  }

  public virtual void uninstallPlugin(string name) {
    cAudioCSharpWrapperPINVOKE.IPluginManager_uninstallPlugin__SWIG_1(swigCPtr, name);
  }

}

}
